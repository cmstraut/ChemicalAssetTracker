// <auto-generated />
using System;
using DataModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataModel.Migrations
{
    [DbContext(typeof(CMSDB))]
    [Migration("20211119195643_01_InitialMigration")]
    partial class _01_InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DataModel.Attachment", b =>
                {
                    b.Property<int>("AttachmentID")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Data")
                        .IsRequired();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("AttachmentID");

                    b.HasIndex("Login");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("DataModel.CASData", b =>
                {
                    b.Property<int>("CASDataID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CASNumber")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("CWCFlag")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)));

                    b.Property<string>("CarcinogenFlag")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)));

                    b.Property<string>("ChemicalName")
                        .HasMaxLength(1024);

                    b.Property<string>("Pictograms")
                        .HasMaxLength(256);

                    b.Property<string>("TheftFlag")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)));

                    b.HasKey("CASDataID");

                    b.HasIndex("CASNumber");

                    b.ToTable("CASDataItems");
                });

            modelBuilder.Entity("DataModel.CASDisposalProcedure", b =>
                {
                    b.Property<int>("CASDisposalProcedureID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CASNumber")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int>("DisposalProcedureID");

                    b.HasKey("CASDisposalProcedureID");

                    b.HasIndex("CASNumber");

                    b.ToTable("CASDisposalProcedures");
                });

            modelBuilder.Entity("DataModel.ChemicalOfConcern", b =>
                {
                    b.Property<int>("COCID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AG");

                    b.Property<string>("CASNumber")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<bool>("CFATS");

                    b.Property<bool>("CWC");

                    b.Property<string>("ChemicalName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<bool>("EU");

                    b.Property<bool>("OTHER");

                    b.Property<bool>("WMD");

                    b.HasKey("COCID");

                    b.HasIndex("CASNumber");

                    b.ToTable("ChemicalsOfConcern");
                });

            modelBuilder.Entity("DataModel.DatabaseQuery", b =>
                {
                    b.Property<int>("DatabaseQueryID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("QueryText")
                        .IsRequired();

                    b.HasKey("DatabaseQueryID");

                    b.ToTable("DatabaseQueries");
                });

            modelBuilder.Entity("DataModel.DisposalProcedure", b =>
                {
                    b.Property<int>("DisposalProcedureID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category")
                        .HasMaxLength(32);

                    b.Property<string>("ChemicalName");

                    b.Property<string>("Products");

                    b.Property<string>("Schedule")
                        .HasMaxLength(8);

                    b.Property<string>("Techniques")
                        .IsRequired();

                    b.Property<string>("Treatment")
                        .HasMaxLength(64);

                    b.Property<string>("WasteDisposal");

                    b.HasKey("DisposalProcedureID");

                    b.ToTable("DisposalProcedures");
                });

            modelBuilder.Entity("DataModel.GHSData", b =>
                {
                    b.Property<int>("LCSSInformationID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CASNumber")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int>("CID");

                    b.Property<string>("ChemicalName")
                        .IsRequired()
                        .HasMaxLength(4095);

                    b.Property<string>("HazardStatements");

                    b.Property<bool>("IsAccuteToxicity");

                    b.Property<bool>("IsCompressedGas");

                    b.Property<bool>("IsCorrosive");

                    b.Property<bool>("IsEnvironmental");

                    b.Property<bool>("IsExplosive");

                    b.Property<bool>("IsFlamable");

                    b.Property<bool>("IsHealthHazard");

                    b.Property<bool>("IsIrritant");

                    b.Property<bool>("IsOxidizer");

                    b.Property<string>("Pictograms")
                        .IsRequired()
                        .HasMaxLength(1024);

                    b.Property<string>("PrecautionaryCodes");

                    b.Property<string>("Signal")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int>("SourceID");

                    b.HasKey("LCSSInformationID");

                    b.ToTable("GHSClassifications");
                });

            modelBuilder.Entity("DataModel.HazardCode", b =>
                {
                    b.Property<int>("HazardCodeID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CASNumber")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("GHSCode")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<string>("HazardClass")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("HazardCodeID");

                    b.HasIndex("CASNumber");

                    b.HasIndex("GHSCode");

                    b.ToTable("HazardCodes");
                });

            modelBuilder.Entity("DataModel.InventoryAudit", b =>
                {
                    b.Property<int>("InventoryAuditID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AuditTime");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int>("InventoryID");

                    b.Property<int?>("LocationID");

                    b.Property<int?>("PreviousLocationID");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("InventoryAuditID");

                    b.HasIndex("InventoryID");

                    b.ToTable("InventoryAudits");
                });

            modelBuilder.Entity("DataModel.InventoryItem", b =>
                {
                    b.Property<int>("InventoryID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("CASNumber")
                        .HasMaxLength(32);

                    b.Property<string>("ChemicalName")
                        .HasMaxLength(256);

                    b.Property<double?>("ContainerSize");

                    b.Property<string>("Custom1")
                        .HasMaxLength(256);

                    b.Property<string>("Custom2")
                        .HasMaxLength(256);

                    b.Property<string>("Custom3")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("DateIn");

                    b.Property<bool>("DisposeFlag");

                    b.Property<DateTime?>("ExpirationDate");

                    b.Property<string>("Flags")
                        .HasMaxLength(16);

                    b.Property<int?>("GroupID");

                    b.Property<int?>("InventoryStatusID");

                    b.Property<bool>("IsOtherCOC")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastInventoryDate");

                    b.Property<int>("LocationID");

                    b.Property<int>("MaterialType")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<string>("Notes")
                        .HasMaxLength(4096);

                    b.Property<int?>("OwnerID");

                    b.Property<double?>("RemainingQuantity");

                    b.Property<string>("SDS")
                        .HasMaxLength(32);

                    b.Property<string>("State")
                        .HasMaxLength(64);

                    b.Property<int?>("StockCheckPreviousLocation");

                    b.Property<DateTime?>("StockCheckTime");

                    b.Property<string>("StockCheckUser")
                        .HasMaxLength(64);

                    b.Property<string>("Units")
                        .HasMaxLength(64);

                    b.HasKey("InventoryID");

                    b.HasIndex("GroupID");

                    b.HasIndex("InventoryStatusID");

                    b.HasIndex("LocationID");

                    b.HasIndex("OwnerID");

                    b.ToTable("InventoryItems");
                });

            modelBuilder.Entity("DataModel.InventoryStatus", b =>
                {
                    b.Property<int>("InventoryStatusID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("InventoryStatusID");

                    b.ToTable("InventoryStatusNames");
                });

            modelBuilder.Entity("DataModel.LocationLevelName", b =>
                {
                    b.Property<int>("LocationLevel");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.HasKey("LocationLevel");

                    b.ToTable("LocationLevelNames");
                });

            modelBuilder.Entity("DataModel.LocationType", b =>
                {
                    b.Property<int>("LocationTypeID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("ValidChildren")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("LocationTypeID");

                    b.ToTable("LocationTypes");
                });

            modelBuilder.Entity("DataModel.LogEntry", b =>
                {
                    b.Property<int>("LogEntryID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTime>("EntryDateTime");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("MessageLevel");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1024);

                    b.HasKey("LogEntryID");

                    b.ToTable("LogEntries");
                });

            modelBuilder.Entity("DataModel.Owner", b =>
                {
                    b.Property<int>("OwnerID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("OwnerID");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("DataModel.RemovedItem", b =>
                {
                    b.Property<int>("RemovedItemID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("CASNumber")
                        .HasMaxLength(32);

                    b.Property<string>("ChemicalName")
                        .HasMaxLength(256);

                    b.Property<double?>("ContainerSize");

                    b.Property<DateTime?>("DateIn");

                    b.Property<DateTime>("DateRemoved");

                    b.Property<DateTime?>("ExpirationDate");

                    b.Property<string>("Flags")
                        .HasMaxLength(16);

                    b.Property<int?>("GroupID");

                    b.Property<int>("InventoryID");

                    b.Property<int>("LocationID");

                    b.Property<int?>("OwnerID");

                    b.Property<double?>("RemainingQuantity");

                    b.Property<int>("RemovalReason");

                    b.Property<string>("State")
                        .HasMaxLength(64);

                    b.Property<string>("Units")
                        .HasMaxLength(64);

                    b.HasKey("RemovedItemID");

                    b.ToTable("RemovedItems");
                });

            modelBuilder.Entity("DataModel.ReportDefinition", b =>
                {
                    b.Property<int>("ReportID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ColumnDefinitions");

                    b.Property<int>("DatabaseQueryID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024);

                    b.Property<string>("ReportName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Roles")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("WhereClause");

                    b.Property<string>("Widgets")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("ReportID");

                    b.HasIndex("DatabaseQueryID");

                    b.ToTable("ReportDefinitions");
                });

            modelBuilder.Entity("DataModel.Setting", b =>
                {
                    b.Property<int>("SettingID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("SettingKey")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("SettingValue")
                        .IsRequired();

                    b.HasKey("SettingID");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("DataModel.StorageGroup", b =>
                {
                    b.Property<int>("GroupID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("GroupID");

                    b.ToTable("StorageGroups");
                });

            modelBuilder.Entity("DataModel.StorageLocation", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsLeaf");

                    b.Property<int>("LocationLevel");

                    b.Property<int>("LocationTypeID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int>("ParentID");

                    b.Property<string>("Path")
                        .HasMaxLength(4095);

                    b.HasKey("LocationID");

                    b.HasIndex("LocationTypeID");

                    b.HasIndex("ParentID");

                    b.ToTable("StorageLocations");
                });

            modelBuilder.Entity("DataModel.InventoryAudit", b =>
                {
                    b.HasOne("DataModel.InventoryItem", "Item")
                        .WithMany()
                        .HasForeignKey("InventoryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataModel.InventoryItem", b =>
                {
                    b.HasOne("DataModel.StorageGroup", "Group")
                        .WithMany()
                        .HasForeignKey("GroupID");

                    b.HasOne("DataModel.InventoryStatus", "InventoryStatus")
                        .WithMany()
                        .HasForeignKey("InventoryStatusID");

                    b.HasOne("DataModel.StorageLocation", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataModel.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerID");
                });

            modelBuilder.Entity("DataModel.ReportDefinition", b =>
                {
                    b.HasOne("DataModel.DatabaseQuery", "Query")
                        .WithMany()
                        .HasForeignKey("DatabaseQueryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataModel.StorageLocation", b =>
                {
                    b.HasOne("DataModel.LocationType", "LocationType")
                        .WithMany()
                        .HasForeignKey("LocationTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
